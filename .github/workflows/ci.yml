name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.3'

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v5
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html

      - name: Check coverage threshold
        run: |
          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: $coverage%"
          if (( $(echo "$coverage < 70" | bc -l) )); then
            echo "Coverage is below 70%"
            exit 1
          fi

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.3'

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m

      - name: Run go vet
        run: go vet ./...

      - name: Run staticcheck
        uses: dominikh/staticcheck-action@v1
        with:
          version: "latest"
          install-go: false

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.3'

      - name: Run benchmarks for current branch
        run: |
          go test -bench=. -benchmem -run=^$ -count=5 ./... | tee benchmark-current.txt

      - name: Upload current benchmark results
        uses: actions/upload-artifact@v5
        with:
          name: benchmark-current
          path: benchmark-current.txt

      - name: Compare benchmarks (PR only)
        if: github.event_name == 'pull_request'
        run: |
          # Save current branch name
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          
          # Checkout base branch (master/main)
          git checkout ${{ github.base_ref }}
          
          # Run benchmarks on base branch
          echo "Running benchmarks on base branch: ${{ github.base_ref }}"
          go test -bench=. -benchmem -run=^$ -count=5 ./... | tee benchmark-base.txt
          
          # Checkout back to PR branch
          git checkout $CURRENT_BRANCH
          
          # Install benchstat if not available
          go install golang.org/x/perf/cmd/benchstat@latest
          
          # Compare benchmarks
          echo "## Benchmark Comparison" > benchmark-comparison.txt
          echo "" >> benchmark-comparison.txt
          echo "Comparing PR branch against \`${{ github.base_ref }}\`" >> benchmark-comparison.txt
          echo "" >> benchmark-comparison.txt
          echo '```' >> benchmark-comparison.txt
          benchstat benchmark-base.txt benchmark-current.txt >> benchmark-comparison.txt || true
          echo '```' >> benchmark-comparison.txt

      - name: Upload benchmark comparison
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v5
        with:
          name: benchmark-comparison
          path: |
            benchmark-base.txt
            benchmark-current.txt
            benchmark-comparison.txt

      - name: Comment PR with benchmark results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Read the comparison file
            let comparison = '';
            try {
              comparison = fs.readFileSync('benchmark-comparison.txt', 'utf8');
            } catch (error) {
              comparison = '## Benchmark Comparison\n\nFailed to generate comparison.';
            }
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Benchmark Comparison');
            });
            
            const commentBody = comparison + '\n\n---\n*This comment will be automatically updated when new commits are pushed.*';
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.3'

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: './...'

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...